{"version":3,"sources":["components/layout/Navbar.js","views/Login.js","views/Signup.js","views/Logout.js","views/Dashboard.js","views/PostCreate.js","components/CommentCreate.js","components/CommentNester.js","components/Comment.js","views/PostRender.js","App.js","reportWebVitals.js","index.js"],"names":["Navbar","useState","isAuth","setIsAuth","useEffect","localStorage","getItem","className","to","Login","props","username","setUsername","password","setPassword","errors","setErrors","loading","setLoading","window","location","replace","onSubmit","e","preventDefault","user","fetch","method","headers","body","JSON","stringify","then","res","json","data","key","clear","setItem","id","htmlFor","name","type","value","required","onChange","target","Signup","password1","setPassword1","password2","setPassword2","Logout","onClick","Authorization","console","log","Dashboard","news","setNews","favorites","reverse","map","element","href","url","title","style","fontSize","Post","setTitle","setUrl","CommentCreate","comment","setComment","commentObj","text","newspost","postId","replyTo","post","mainPage","hasReplies","cancelButton","onNewComment","rows","cols","CommentNester","replies","setReplies","activeTextFieldForReply","setActiveTextFieldForReply","activeFieldForReply","setActiveFieldForReply","replySwitchOn","setReplySwitchOn","localUserId","showReplies","commentId","updateMode","repliesToComment","Object","keys","length","onNewPost","commentToRefresh","filter","onCommentDelete","comments","index","backgroundColor","color","alignSelf","display","customuser","comment_date","commentReplyTo","a","newReplies","commentIndexUpdate","findIndex","updateHasReplies","c","p","u","b","Comment","PostRender","useParams","PostId","postData","setPostData","setComments","voteState","setVoteState","split","setFavorites","getComments","dataOfPost","commentsOfPost","catch","error","reload","join","includes","toString","point","newValuesOfFavorites","item","newComments","t","App","onSubmitLogin","path","component","exact","PostCreate","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.994e6e29.chunk.js","sourcesContent":["import React, { useState, useEffect, Fragment } from 'react';\r\nimport { Link } from 'react-router-dom';\r\n\r\nconst Navbar = () => {\r\n    const [isAuth, setIsAuth] = useState(false);\r\n\r\n    useEffect(() => {\r\n        if (localStorage.getItem('token') !== null) {\r\n            setIsAuth(true);\r\n        }\r\n    }, []);\r\n\r\n    return (\r\n        <nav className='mb-1 bg-dark p-1 w-100'>\r\n            {isAuth === true ? (\r\n                <Fragment>\r\n                    {' '}\r\n                    <Link to='/'>Home</Link>\r\n                    <span> | </span>\r\n                    <Link to='/logout'>Logout</Link>\r\n                    <span> | </span>\r\n                    <Link to='/post-news'>Post</Link>\r\n                </Fragment>\r\n            ) : (\r\n                <Fragment>\r\n                    {' '}\r\n                    <Link to='/login'>Login</Link>\r\n                    <span> | </span>\r\n                    <Link to='/signup'>Signup</Link>\r\n                    <span> | </span>\r\n                    <Link to='/'>Home</Link>\r\n\r\n                </Fragment>\r\n            )}\r\n        </nav >\r\n    );\r\n};\r\n\r\nexport default Navbar;","import React, { useState, useEffect } from 'react';\r\n\r\nconst Login = (props) => {\r\n    // console.log(props)\r\n    const [email, setEmail] = useState('');\r\n    const [username, setUsername] = useState('');\r\n    const [password, setPassword] = useState('');\r\n    const [errors, setErrors] = useState(false);\r\n    const [loading, setLoading] = useState(true);\r\n\r\n    useEffect(() => {\r\n        if (localStorage.getItem('token') !== null) {\r\n            window.location.replace('/');\r\n        } else {\r\n            setLoading(false);\r\n        }\r\n    }, []);\r\n\r\n    const onSubmit = e => {\r\n        e.preventDefault();\r\n\r\n        const user = {\r\n            // email: email,\r\n            username: username,\r\n            password: password\r\n        };\r\n\r\n        fetch('/api/users/auth/login/', {\r\n            method: 'POST',\r\n            headers: {\r\n                'Content-Type': 'application/json'\r\n            },\r\n            body: JSON.stringify(user)\r\n        })\r\n            .then(res => res.json())\r\n            .then(data => {\r\n                if (data.key) {\r\n                    // console.log(data)\r\n                    localStorage.clear();\r\n                    localStorage.setItem('token', data.key);\r\n                    localStorage.setItem('userId', data.user.id);\r\n                    window.location.replace('/');\r\n                } else {\r\n                    setUsername('');\r\n                    setPassword('');\r\n                    localStorage.clear();\r\n                    setErrors(true);\r\n                }\r\n            });\r\n    };\r\n\r\n    const onSubmitNew = e => {\r\n        e.preventDefault();\r\n        props.onSubmit(username, password)\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            {/* {loading === false && <h1>Login</h1>} */}\r\n            {loading === false && (\r\n                <form onSubmit={onSubmit}\r\n                    className='mt-1'>\r\n                    <label htmlFor='username'>Username:</label>\r\n                    <input\r\n                        className='mx-1'\r\n                        name='username'\r\n                        type='text'\r\n                        value={username}\r\n                        required\r\n                        onChange={e => setUsername(e.target.value)}\r\n                    />{' '}\r\n                    {/* <br /> */}\r\n                    <label htmlFor='password'>Password:</label>\r\n                    <input\r\n                        className='mx-1'\r\n                        name='password'\r\n                        type='password'\r\n                        value={password}\r\n                        required\r\n                        onChange={e => setPassword(e.target.value)}\r\n                    />{' '}\r\n                    {/* <br /> */}\r\n                    <input type='submit' value='Login' />\r\n                </form>\r\n            )}\r\n            {errors === true && <section>Cannot log in with provided credentials</section>}\r\n\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Login;","import React, { useState, useEffect } from 'react';\r\n\r\nconst Signup = () => {\r\n    const [username, setUsername] = useState('');\r\n    const [password1, setPassword1] = useState('');\r\n    const [password2, setPassword2] = useState('');\r\n    const [errors, setErrors] = useState(false);\r\n    const [loading, setLoading] = useState(true);\r\n\r\n    useEffect(() => {\r\n        if (localStorage.getItem('token') !== null) {\r\n            window.location.replace('/dashboard');\r\n        } else {\r\n            setLoading(false);\r\n        }\r\n    }, []);\r\n\r\n    const onSubmit = e => {\r\n        e.preventDefault();\r\n\r\n        const user = {\r\n            username: username,\r\n            password1: password1,\r\n            password2: password2\r\n        };\r\n\r\n        fetch('/api/users/auth/register/', {\r\n            method: 'POST',\r\n            headers: {\r\n                'Content-Type': 'application/json'\r\n            },\r\n            body: JSON.stringify(user)\r\n        })\r\n            .then(res => res.json())\r\n            .then(data => {\r\n                if (data.key) {\r\n                    localStorage.clear();\r\n                    localStorage.setItem('token', data.key);\r\n                    localStorage.setItem('userId', data.user.id);\r\n                    window.location.replace('/');\r\n                } else {\r\n                    setUsername('');\r\n                    setPassword1('');\r\n                    setPassword2('');\r\n                    localStorage.clear();\r\n                    setErrors(true);\r\n                }\r\n            });\r\n    };\r\n\r\n    return (\r\n        <div>\r\n            {loading === false && <h1>Signup</h1>}\r\n            {errors === true && <h2>Cannot signup with provided credentials</h2>}\r\n            <form onSubmit={onSubmit}>\r\n                <label htmlFor='username'>Username:</label> <br />\r\n                <input\r\n                    name='username'\r\n                    type='username'\r\n                    value={username}\r\n                    onChange={e => setUsername(e.target.value)}\r\n                    required\r\n                />{' '}\r\n                <br />\r\n                <label htmlFor='password1'>Password:</label> <br />\r\n                <input\r\n                    name='password1'\r\n                    type='password'\r\n                    value={password1}\r\n                    onChange={e => setPassword1(e.target.value)}\r\n                    required\r\n                />{' '}\r\n                <br />\r\n                <label htmlFor='password2'>Confirm password:</label> <br />\r\n                <input\r\n                    name='password2'\r\n                    type='password'\r\n                    value={password2}\r\n                    onChange={e => setPassword2(e.target.value)}\r\n                    required\r\n                />{' '}\r\n                <br />\r\n                <input className='my-1' type='submit' value='Signup' />\r\n            </form>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Signup;","import React, { useState, useEffect, Fragment } from 'react';\r\n\r\nconst Logout = () => {\r\n    const [loading, setLoading] = useState(true);\r\n\r\n    useEffect(() => {\r\n        if (localStorage.getItem('token') == null) {\r\n            window.location.replace('/login');\r\n        } else {\r\n            setLoading(false);\r\n        }\r\n    }, []);\r\n\r\n    const handleLogout = e => {\r\n        e.preventDefault();\r\n\r\n        fetch('/api/users/auth/logout/', {\r\n            method: 'POST',\r\n            headers: {\r\n                'Content-Type': 'application/json',\r\n                Authorization: `Token ${localStorage.getItem('token')}`\r\n            }\r\n        })\r\n            .then(res => res.json())\r\n            .then(data => {\r\n                console.log(data);\r\n                localStorage.clear();\r\n                window.location.replace('/login');\r\n            });\r\n    };\r\n\r\n    return (\r\n        <div>\r\n            {loading === false && (\r\n                <Fragment>\r\n                    <h4>Are you sure you want to logout?</h4>\r\n                    <input type='button' value='Logout' onClick={handleLogout} />\r\n                </Fragment>\r\n            )}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Logout;","import React, { useState, useEffect, Fragment } from 'react';\r\n\r\nconst Dashboard = () => {\r\n    const [userEmail, setUserEmail] = useState('');\r\n    const [username, setUsername] = useState('');\r\n    const [news, setNews] = useState({});\r\n    const [loading, setLoading] = useState(true);\r\n\r\n    useEffect(() => {\r\n        if (localStorage.getItem('token') === null) {\r\n            window.location.replace('/login');\r\n        } else {\r\n            fetch('/api/users/auth/user/', {\r\n                method: 'GET',\r\n                headers: {\r\n                    'Content-Type': 'application/json',\r\n                    Authorization: `Token ${localStorage.getItem('token')}`\r\n                }\r\n            })\r\n                .then(res => res.json())\r\n                .then(data => {\r\n                    // setUserEmail(data.email);\r\n                    console.log(data)\r\n                    setUsername(data.username)\r\n                    localStorage.setItem('favorites', data.favorites)\r\n                    console.log('dashboard favorites: ', localStorage.getItem('favorites'))\r\n                });\r\n        }\r\n        fetch('/api/data/news/', {\r\n            method: 'GET',\r\n            headers: {\r\n                'Content-Type': 'application/json',\r\n            }\r\n        })\r\n            .then(res => res.json())\r\n            .then(data => {\r\n                console.log(data)\r\n                setNews(data.reverse())\r\n                setLoading(false);\r\n            }\r\n            )\r\n    }, []);\r\n\r\n    return (\r\n        <div className='d-flex flex-column align-items-center'>\r\n            {loading === false && (\r\n                <Fragment>\r\n                    {/* <h1>Dashboard</h1> */}\r\n                    {/* <section className='mt-1'>Hello {username}!</section> */}\r\n                    <div className='col-md-10'>\r\n                        {news.map(element => {\r\n                            return (<div key={element.id} className='bg-secondary py-1 px-2 rounded my-1'>\r\n                                <a className='postLinks' href={`http://${element.url}`}>{element.title}</a>\r\n                                <span>  </span>\r\n                                <a className='commentLinks' style={{ fontSize: '0.8rem' }} href={`news/${element.id}`} >Comments</a>\r\n                            </div>)\r\n                        })}\r\n                    </div>\r\n                </Fragment>\r\n            )}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Dashboard;","import React, { useState, useEffect, Fragment } from 'react';\r\n\r\nconst Post = () => {\r\n    const [username, setUsername] = useState('');\r\n    const [title, setTitle] = useState('');\r\n    const [url, setUrl] = useState('');\r\n\r\n    const onPost = e => {\r\n        e.preventDefault();\r\n        console.log('post going')\r\n        if (localStorage.getItem('token') === null) {\r\n            window.location.replace('/login');\r\n        } else {\r\n            fetch('/api/data/news/', {\r\n                method: 'POST',\r\n                headers: {\r\n                    'Content-Type': 'application/json',\r\n                    Authorization: `Token ${localStorage.getItem('token')}`\r\n                },\r\n                body: JSON.stringify({ title, url })\r\n            })\r\n                .then(res => res.json())\r\n                .then(data => {\r\n                    console.log(data)\r\n                    if (data.id) {\r\n                        window.location.replace('/')\r\n                    }\r\n                })\r\n\r\n        }\r\n    }\r\n\r\n    return (\r\n        <Fragment>\r\n            <div className='mt-2'>\r\n                <form onSubmit={onPost}\r\n                    className='m-1'>\r\n                    <label htmlFor='title'>Title:</label>\r\n                    <input\r\n                        className='mx-1'\r\n                        name='title'\r\n                        type='text'\r\n                        value={title}\r\n                        required\r\n                        onChange={e => setTitle(e.target.value)}\r\n                    />{' '}\r\n                    {/* <br /> */}\r\n                    <label htmlFor='url'>Url:</label>\r\n                    <input\r\n                        className='mx-1'\r\n                        name='url'\r\n                        type='text'\r\n                        value={url}\r\n                        required\r\n                        onChange={e => setUrl(e.target.value)}\r\n                    />{' '}\r\n                    {/* <br /> */}\r\n                    <input className='' type='submit' value='Post' />\r\n                </form>\r\n            </div>\r\n        </Fragment>\r\n    );\r\n};\r\n\r\nexport default Post;","import React, { useState, useEffect, Fragment } from 'react';\r\nimport { Link } from 'react-router-dom';\r\n\r\nconst CommentCreate = (props) => {\r\n    const [isAuth, setIsAuth] = useState(false);\r\n    const [comment, setComment] = useState('');\r\n\r\n    useEffect(() => {\r\n\r\n    }, []);\r\n\r\n    function onCommentSubmit(e) {\r\n        e.preventDefault()\r\n        console.log(comment)\r\n        console.log('comment going')\r\n        if (localStorage.getItem('token') === null) {\r\n            window.location.replace('/login');\r\n        } else {\r\n            fetch('/api/users/auth/user/', {\r\n                method: 'GET',\r\n                headers: {\r\n                    'Content-Type': 'application/json',\r\n                    Authorization: `Token ${localStorage.getItem('token')}`\r\n                }\r\n            })\r\n                .then(res => res.json())\r\n                .then(data => {\r\n                    // setUserEmail(data.email);\r\n                    // setUsername(data.username)\r\n                    // setLoading(false);\r\n                    // console.log(data)\r\n                    let commentObj = { text: comment, user: data.id, newspost: props.postId, replyTo: props.replyTo }\r\n                    console.log(commentObj)\r\n                    return commentObj;\r\n                })\r\n                .then(post => {\r\n                    fetch(`/api/data/comment/`, {\r\n                        method: 'POST',\r\n                        headers: {\r\n                            'Content-Type': 'application/json',\r\n                            Authorization: `Token ${localStorage.getItem('token')}`\r\n                        },\r\n                        body: JSON.stringify(post)\r\n                    })\r\n                        .then(res => res.json())\r\n                        .then(data => {\r\n                            console.log(data)\r\n                            setComment('')\r\n                            if (data.id && !props.mainPage) {\r\n                                //update the replied comment with hasReplies=true value\r\n                                let commentObj = { hasReplies: true }\r\n                                fetch(`/api/data/comment/${props.replyTo}/`, {\r\n                                    method: 'PATCH',\r\n                                    headers: {\r\n                                        'Content-Type': 'application/json',\r\n                                        Authorization: `Token ${localStorage.getItem('token')}`\r\n                                    },\r\n                                    body: JSON.stringify(commentObj)\r\n                                }).then(() => {\r\n                                    props.cancelButton()\r\n                                    console.log(props.replyTo, props.postId)\r\n                                    props.onNewComment(props.replyTo, props.postId, true)\r\n                                    // window.location.replace(`/news/${props.postId}`)\r\n                                })\r\n                            } else {\r\n                                props.onNewComment(props.replyTo, props.postId, true)\r\n                                // window.location.replace(`/news/${props.postId}`)\r\n                            }\r\n                        })\r\n                })\r\n        }\r\n    }\r\n\r\n\r\n    return (\r\n        <form className='ms-3 mt-1' onSubmit={onCommentSubmit}>\r\n            <textarea\r\n                name='comment'\r\n                id='comment'\r\n                required\r\n                value={comment}\r\n                onChange={e => setComment(e.target.value)}\r\n                rows=\"5\" cols=\"40\"></textarea>\r\n            <br />\r\n            <button className='btn btn-sm btn-primary' type=\"submit\">add comment</button>\r\n            <span> </span>\r\n            {props.mainPage\r\n                ? ''\r\n                : <button className='btn btn-sm btn-danger' onClick={props.cancelButton}>cancel</button>}\r\n\r\n        </form>\r\n    )\r\n};\r\n\r\nexport default CommentCreate;","import React, { useState, useEffect, Fragment } from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport CommentCreate from './CommentCreate'\r\nimport Comment from './Comment'\r\n\r\nconst CommentNester = (props) => {\r\n    const [isAuth, setIsAuth] = useState(false);\r\n    const [replies, setReplies] = useState({});\r\n    const [activeTextFieldForReply, setActiveTextFieldForReply] = useState('');\r\n    const [activeFieldForReply, setActiveFieldForReply] = useState('');\r\n    const [replySwitchOn, setReplySwitchOn] = useState(true)\r\n    const [localUserId, setLocalUserId] = useState(localStorage.getItem('userId'))\r\n\r\n    function replyToComment(id) {\r\n        // e.preventDefault()\r\n        console.log(id)\r\n        setActiveFieldForReply('')\r\n        setActiveTextFieldForReply(id)\r\n    }\r\n\r\n    function showReplies(commentId, postId, updateMode = false) {\r\n        console.log('show replies for: ', commentId)\r\n        fetch(`/api/data/comment/?newspost=${postId}&replyTo=${commentId}`)\r\n            .then(res => {\r\n                console.log(res)\r\n                return res.json()\r\n            })\r\n            .then(repliesToComment => {\r\n                console.log('repliesToComment: ', repliesToComment)\r\n                // setComments(repliesToComment.reverse())\r\n                if (Object.keys(repliesToComment).length > 0) {\r\n                    if (activeFieldForReply == commentId && !updateMode) {\r\n                        //if button clicked on active frame close the frame.\r\n                        console.log('toggle enabled')\r\n                        setReplySwitchOn(!replySwitchOn)\r\n                    } else { setReplySwitchOn(true) }\r\n                    setReplies(repliesToComment.reverse())\r\n                    console.log('replies: ', replies)\r\n                    setActiveFieldForReply(commentId)\r\n                    setActiveTextFieldForReply('')\r\n                    if (updateMode) {\r\n                        //find the parent comment of the comment to be refreshed\r\n                        //this updates comment data and brings view reply button\r\n                        console.log('update mode comment id: ', commentId)\r\n                        props.onNewPost(commentId)\r\n                    }\r\n                } else {\r\n                    if (updateMode) {\r\n                        //if there is no replies left, update the comment field\r\n                        let commentObj = { hasReplies: false }\r\n                        fetch(`/api/data/comment/${commentId}/`, {\r\n                            method: 'PATCH',\r\n                            headers: {\r\n                                'Content-Type': 'application/json',\r\n                                Authorization: `Token ${localStorage.getItem('token')}`\r\n                            },\r\n                            body: JSON.stringify(commentObj)\r\n                        })\r\n                            .then(() => {\r\n                                //this closes the dropdown\r\n                                setActiveFieldForReply('')\r\n                                //find the parent comment of the comment to be refreshed\r\n                                //this refreshes comment data and removes view reply button \r\n                                let commentToRefresh = replies.filter(id => id == commentId)\r\n                                props.onCommentDelete(commentToRefresh.replyTo, props.postId, true)\r\n                            })\r\n                    } //else { setActiveFieldForReply(commentId) } // after cleaning database on second loop hide the deleted content\r\n                }\r\n            })\r\n    }\r\n\r\n    function cancelButton() {\r\n        setActiveTextFieldForReply('')\r\n    }\r\n\r\n    function deleteComment(commentId, commentReplyTo) {\r\n        fetch(`/api/data/comment/${commentId}/`, {\r\n            method: 'DELETE',\r\n            headers: {\r\n                Authorization: `Token ${localStorage.getItem('token')}`\r\n            },\r\n        })\r\n            // .then(res => res)\r\n            .then(data => {\r\n                console.log('delete reply: ', data)\r\n                // if (commentReplyTo) {\r\n                // console.log('commentReplyTo', commentReplyTo)\r\n                props.onCommentDelete(commentReplyTo, props.postId, true)\r\n                // }\r\n                // window.location.reload()\r\n            })\r\n    }\r\n\r\n    function updateHasReplies(commentId) {\r\n        let newReplies = [...replies]\r\n        let commentIndexUpdate = newReplies.findIndex(comment => comment.id == commentId)\r\n        console.log('commentIndexUpdate: ', commentIndexUpdate)\r\n        newReplies[commentIndexUpdate].hasReplies = true\r\n        setReplies(newReplies)\r\n    }\r\n\r\n    return (\r\n        Object.keys(props.comments).length > 0 // if there is any comment load comments\r\n            ? props.comments.map((comment, index) => {\r\n                return (\r\n                    <div key={comment.id} className=\"m-2 ms-3\">\r\n                        <section className='commentHeader' style={{\r\n                            backgroundColor: 'black',\r\n                            color: 'white',\r\n                            alignSelf: 'flex-start',\r\n                            display: 'inline-block'\r\n                        }}>{comment.customuser} - {comment.comment_date}</section>\r\n                        <div className='py-1'>{comment.text}</div>\r\n                        <button className='btn btn-sm btn-primary' onClick={() => replyToComment(comment.id)}>reply</button>\r\n                        <span> </span>\r\n                        {comment.hasReplies\r\n                            ? <button className='btn btn-sm btn-primary' onClick={() => { showReplies(comment.id, props.postId) }}>view replies</button>\r\n                            : ''\r\n                        }\r\n                        <span> </span>\r\n                        {comment.user == localUserId\r\n                            ? <button className='btn btn-sm btn-danger' onClick={() => { deleteComment(comment.id, comment.replyTo) }}>delete</button>\r\n                            : ''\r\n                        }\r\n                        {activeFieldForReply == comment.id && replySwitchOn\r\n                            ? <Comment onNewPost={(a) => updateHasReplies(a)}\r\n                                onCommentDelete={(c, p, u) => showReplies(c, p, u)}\r\n                                comments={replies} postId={props.postId} />\r\n                            : ''}\r\n                        {activeTextFieldForReply == comment.id\r\n                            ? <CommentCreate onNewComment={(a, b, u) => showReplies(a, b, u)} cancelButton={cancelButton} postId={props.postId} replyTo={comment.id} />\r\n                            : ''}\r\n                    </div>\r\n                )\r\n            })\r\n            : ''\r\n    )\r\n};\r\n\r\nexport default CommentNester;","import React, { useState, useEffect, Fragment } from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport CommentCreate from './CommentCreate'\r\nimport CommentNester from './CommentNester'\r\n\r\nconst Comment = (props) => {\r\n    const [isAuth, setIsAuth] = useState(false);\r\n    const [replies, setReplies] = useState({});\r\n    const [activeTextFieldForReply, setActiveTextFieldForReply] = useState('');\r\n    const [activeFieldForReply, setActiveFieldForReply] = useState('');\r\n    const [replySwitchOn, setReplySwitchOn] = useState(true)\r\n    const [localUserId, setLocalUserId] = useState(localStorage.getItem('userId'))\r\n\r\n    useEffect(() => {\r\n\r\n    }, []);\r\n\r\n    function replyToComment(id) {\r\n        // e.preventDefault()\r\n        console.log(id)\r\n        setActiveFieldForReply('')\r\n        setActiveTextFieldForReply(id)\r\n    }\r\n\r\n    function showReplies(commentId, postId, updateMode = false) {\r\n        console.log('show replies for: ', commentId)\r\n        fetch(`/api/data/comment/?newspost=${postId}&replyTo=${commentId}`)\r\n            .then(res => {\r\n                console.log(res)\r\n                return res.json()\r\n            })\r\n            .then(repliesToComment => {\r\n                console.log('repliesToComment: ', repliesToComment)\r\n                // setComments(repliesToComment.reverse())\r\n                if (Object.keys(repliesToComment).length > 0) {\r\n                    if (activeFieldForReply == commentId && !updateMode) {\r\n                        //if button clicked on active frame close the frame.\r\n                        console.log('toggle enabled')\r\n                        setReplySwitchOn(!replySwitchOn)\r\n                    } else { setReplySwitchOn(true) }\r\n                    setReplies(repliesToComment.reverse())\r\n                    console.log('replies: ', replies)\r\n                    setActiveFieldForReply(commentId)\r\n                    setActiveTextFieldForReply('')\r\n                    if (updateMode) {\r\n                        //find the parent comment of the comment to be refreshed\r\n                        //this updates comment data and brings view reply button\r\n                        console.log('update mode comment id: ', commentId)\r\n                        props.onNewPost(commentId)\r\n                    }\r\n                } else {\r\n                    if (updateMode) {\r\n                        //if there is no replies left, update the comment field\r\n                        let commentObj = { hasReplies: false }\r\n                        fetch(`/api/data/comment/${commentId}/`, {\r\n                            method: 'PATCH',\r\n                            headers: {\r\n                                'Content-Type': 'application/json',\r\n                                Authorization: `Token ${localStorage.getItem('token')}`\r\n                            },\r\n                            body: JSON.stringify(commentObj)\r\n                        })\r\n                            .then(() => {\r\n                                //this closes the dropdown\r\n                                setActiveFieldForReply('')\r\n                                let commentToRefresh = replies.filter(id => id == commentId)\r\n                                //this refreshes comment data and removes view reply button \r\n                                props.onCommentDelete(commentToRefresh.replyTo, props.postId, true)\r\n                            })\r\n                    } //else { setActiveFieldForReply(commentId) }\r\n                }\r\n            })\r\n    }\r\n\r\n    function cancelButton() {\r\n        setActiveTextFieldForReply('')\r\n    }\r\n\r\n    function deleteComment(commentId, commentReplyTo) {\r\n        fetch(`/api/data/comment/${commentId}/`, {\r\n            method: 'DELETE',\r\n            headers: {\r\n                Authorization: `Token ${localStorage.getItem('token')}`\r\n            },\r\n        })\r\n            // .then(res => res)\r\n            .then(data => {\r\n                console.log(data)\r\n                // if (commentReplyTo) {\r\n                // console.log('commentReplyTo', commentReplyTo)\r\n                props.onCommentDelete(commentReplyTo, props.postId, true)\r\n                // }\r\n                // window.location.reload()\r\n            })\r\n    }\r\n\r\n    function updateHasReplies(commentId) {\r\n        let newReplies = [...replies]\r\n        let commentIndexUpdate = newReplies.findIndex(comment => comment.id == commentId)\r\n        console.log('commentIndexUpdate: ', commentIndexUpdate)\r\n        newReplies[commentIndexUpdate].hasReplies = true\r\n        setReplies(newReplies)\r\n    }\r\n\r\n    return (\r\n        Object.keys(props.comments).length > 0 // if there is any comment load comments\r\n            ? props.comments.map((comment, index) => {\r\n                return (\r\n                    <div key={comment.id} className=\"m-2 ms-3\">\r\n                        <section className='commentHeader' style={{\r\n                            backgroundColor: 'black',\r\n                            color: 'white',\r\n                            alignSelf: 'flex-start',\r\n                            display: 'inline-block'\r\n                        }}>{comment.customuser} - {comment.comment_date}</section>\r\n                        <div className='py-1'>{comment.text}</div>\r\n                        <button className='btn btn-sm btn-primary' onClick={() => replyToComment(comment.id)}>reply</button>\r\n                        <span> </span>\r\n                        {comment.hasReplies\r\n                            ? <button className='btn btn-sm btn-primary'\r\n                                onClick={() => { showReplies(comment.id, props.postId) }}>view replies</button>\r\n                            : ''\r\n                        }\r\n                        <span> </span>\r\n                        {comment.user == localUserId\r\n                            ? <button className='btn btn-sm btn-danger'\r\n                                onClick={() => { deleteComment(comment.id, comment.replyTo) }}>delete</button>\r\n                            : ''\r\n                        }\r\n                        {activeFieldForReply == comment.id && replySwitchOn\r\n                            ? <CommentNester onNewPost={(a) => updateHasReplies(a)}\r\n                                onCommentDelete={(c, p, u) => showReplies(c, p, u)}\r\n                                comments={replies} postId={props.postId} />\r\n                            : ''}\r\n                        {activeTextFieldForReply == comment.id\r\n                            ? <CommentCreate onNewComment={(c, p, u) => showReplies(c, p, u)} cancelButton={cancelButton} postId={props.postId} replyTo={comment.id} />\r\n                            : ''}\r\n                    </div>\r\n                )\r\n            })\r\n            : ''\r\n    )\r\n};\r\n\r\nexport default Comment;","import React, { useState, useEffect, Fragment } from 'react';\r\nimport { useParams } from \"react-router\";\r\nimport CommentCreate from '../components/CommentCreate'\r\nimport Comment from '../components/Comment'\r\n\r\nfunction PostId() {\r\n    let { id } = useParams();\r\n    console.log('id: ', id)\r\n    return id;\r\n}\r\n\r\nconst PostRender = () => {\r\n    const [loading, setLoading] = useState(true);\r\n    const [postId, setPostId] = useState(PostId());\r\n    const [postData, setPostData] = useState({});\r\n    const [comments, setComments] = useState({});\r\n    const [reply_to, setReply_to] = useState('0');\r\n    const [voteState, setVoteState] = useState('vote');\r\n    const [favorites, setFavorites] = useState(localStorage.getItem('favorites').split(','));\r\n    // PostID()\r\n\r\n    useEffect(() => {\r\n        getComments(postId)\r\n    }, [])\r\n\r\n    function getComments(postId) {\r\n        //fetch the post\r\n        fetch(`/api/data/news/${postId}/`)\r\n            .then(res => res.json())\r\n            .then(dataOfPost => {\r\n                // setUserEmail(data.email);\r\n                // setUsername(data.username)\r\n                console.log('dataOfPost: ', dataOfPost)\r\n                setPostData(dataOfPost)\r\n            })\r\n            .then(() => {\r\n                //fetch the comments of the post\r\n                fetch(`/api/data/comment/?newspost=${postId}`)\r\n                    .then(res => {\r\n                        console.log(res)\r\n                        return res.json()\r\n                    })\r\n                    .then(commentsOfPost => {\r\n                        console.log('commentsOfPost: ', commentsOfPost)\r\n                        setComments(commentsOfPost.reverse())\r\n                        setLoading(false)\r\n                    })\r\n                    .catch(e => console.log('error for comment: ', e))\r\n            })\r\n            .catch(error => {\r\n                window.location.reload()\r\n                console.log(error, 'there is error')\r\n            })\r\n    }\r\n\r\n    function toggleVote() {\r\n        // console.log('favorites: ', favorites)\r\n        if (voteState == 'vote') {\r\n            fetch(`/api/data/news/${postId}/?vote=up`, {\r\n                method: 'GET',\r\n                headers: {\r\n                    'Content-Type': 'application/json',\r\n                    Authorization: `Token ${localStorage.getItem('token')}`\r\n                }\r\n            })\r\n                .then(res => res.json())\r\n                .then(data => {\r\n                    console.log('response from vote up:', data)\r\n                    postData.point = data.point\r\n                    // console.log('upvote old favorites: ', favorites)\r\n                    // let updatedFavorites = [...favorites, postId]\r\n                    // console.log('upvote favorites: ', updatedFavorites)\r\n                    setFavorites([...favorites, postId])\r\n                })\r\n        } else {\r\n            fetch(`/api/data/news/${postId}/?vote=down`, {\r\n                method: 'GET',\r\n                headers: {\r\n                    'Content-Type': 'application/json',\r\n                    Authorization: `Token ${localStorage.getItem('token')}`\r\n                }\r\n            })\r\n                .then(res => res.json())\r\n                .then(data => {\r\n                    postData.point = data.point\r\n                    console.log('postId when removing: ', postId)\r\n                    let newValuesOfFavorites = favorites.filter(item => item != postId)\r\n                    setFavorites(newValuesOfFavorites)\r\n                    // localStorage.setItem('favorites', )\r\n                })\r\n        }\r\n    }\r\n\r\n    function updateHasReplies(commentId) {\r\n        let newComments = [...comments]\r\n        let commentIndexUpdate = newComments.findIndex(comment => comment.id == commentId)\r\n        console.log('commentIndexUpdate: ', commentIndexUpdate)\r\n        newComments[commentIndexUpdate].hasReplies = true\r\n        setComments(newComments)\r\n    }\r\n\r\n    useEffect(() => {\r\n        localStorage.setItem('favorites', favorites.join())\r\n        console.log('favorites: ', favorites)\r\n        favorites.includes(postId.toString())\r\n            ? setVoteState('vote on')\r\n            : setVoteState('vote')\r\n    }, [favorites, postData])\r\n\r\n    return (\r\n        <div>\r\n            {/* {loading === false && ( */}\r\n            <Fragment>\r\n                <div className='col-md-8'>\r\n                    <h4><a className=\"postRenderLinks\" href={`${postData.url}`}>{postData.title}</a>\r\n                        <span onClick={toggleVote} className={voteState}>\r\n                        </span> <small className='mx-2'>{postData.point}</small></h4>\r\n                </div>\r\n                <CommentCreate onNewComment={(a, b) => getComments(b)}\r\n                    mainPage={true} postId={postId} />\r\n                <Comment onNewPost={(a) => updateHasReplies(a)}\r\n                    onCommentDelete={(c, p, t) => getComments(p)}\r\n                    comments={comments} postId={postId} />\r\n            </Fragment>\r\n            {/* )} */}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default PostRender;","import { BrowserRouter as Router, Switch, Route } from 'react-router-dom';\nimport Navbar from './components/layout/Navbar';\nimport Login from './views/Login';\nimport Signup from './views/Signup';\nimport Logout from './views/Logout'; // New\nimport Dashboard from './views/Dashboard'; // New\nimport PostCreate from './views/PostCreate'; // New\nimport PostRender from './views/PostRender'; // New\nimport React, { useState, useEffect } from 'react';\n\n\nconst App = () => {\n  const [username, setUsername] = useState('');\n  const [password, setPassword] = useState('');\n  const [errors, setErrors] = useState(false);\n  const [loading, setLoading] = useState(true);\n\n  const onSubmitLogin = (username, password) => {\n  }\n\n  useEffect(() => {\n    console.log(username)\n  })\n\n  return (\n    <div className='App'>\n      <Router>\n        <div className='mx-2 mt-1'>\n          <Navbar />\n          <Switch>\n            <Route path='/login' component={() => (<Login onSubmit={onSubmitLogin} />)} exact />\n            <Route path='/signup' component={Signup} exact />\n            <Route path='/logout' component={Logout} exact />\n            <Route path='/' component={Dashboard} exact />\n            <Route path='/post-news' component={PostCreate} exact />\n            <Route path='/news/:id' component={PostRender} exact />\n          </Switch>\n        </div>\n      </Router>\n    </div>\n  );\n};\n\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'bootstrap/dist/css/bootstrap.css';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}